// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id            String              @id @default(cuid())
    email         String              @unique
    emailVerified DateTime?
    first_name    String
    middle_name   String?
    last_name     String
    image         String?
    password      String?
    tokens        VerificationToken[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    vote      Vote[]

    commissioners Election[] @relation("commissioners")
    voters        Election[] @relation("voters")

    @@index([id, email])
}

enum ElectionPublicity {
    PUBLIC
    VOTER
    PRIVATE
}

model Election {
    id            String            @id @default(cuid())
    slug          String            @unique
    name          String
    description   String?
    start_date    DateTime
    end_date      DateTime
    publicity     ElectionPublicity @default(PRIVATE)
    voting_start  Int               @default(7) // 7am
    voting_end    Int               @default(19) // 7pm
    logo          String?
    commissioners User[]            @relation("commissioners")
    voters        User[]            @relation("voters")
    candidates    Candidate[]
    positions     Position[]

    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    vote      Vote[]
    partylist Partylist[]

    @@index([id, slug])
}

model Candidate {
    id          String  @id @default(cuid())
    slug        String  @unique
    first_name  String
    middle_name String?
    last_name   String
    description String?
    image       String?

    vote_count Int @default(0)

    election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade)
    electionId String
    position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
    positionId String

    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    vote        Vote[]
    partylist   Partylist? @relation(fields: [partylistId], references: [id], onDelete: Cascade)
    partylistId String?

    @@index([electionId, positionId])
}

model Vote {
    id          String     @id @default(cuid())
    election    Election   @relation(fields: [electionId], references: [id], onDelete: Cascade)
    electionId  String
    voter       User       @relation(fields: [voterId], references: [id], onDelete: Cascade)
    voterId     String
    candidate   Candidate? @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    candidateId String?
    position    Position?  @relation(fields: [positionId], references: [id], onDelete: Cascade)
    positionId  String?
    createdAt   DateTime   @default(now())

    @@index([electionId, voterId, id])
}

model Position {
    id            String      @id @default(cuid())
    name          String
    description   String?
    election      Election    @relation(fields: [electionId], references: [id], onDelete: Cascade)
    electionId    String
    candidate     Candidate[]
    vote          Vote[]
    order         Int
    abstain_count Int         @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([electionId, id])
}

model Partylist {
    id          String      @id @default(cuid())
    name        String
    acronym     String
    description String?
    logo        String?
    election    Election    @relation(fields: [electionId], references: [id], onDelete: Cascade)
    electionId  String
    candidate   Candidate[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([electionId, id])
}

enum TokenType {
    EMAIL_VERIFICATION
    PASSWORD_RESET
    ELECTION_INVITATION
}

model VerificationToken {
    id        String    @id @default(cuid())
    type      TokenType @unique
    expiresAt DateTime
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    @@index([userId, type])
}
