// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model temporaryUser {
    id         String   @id @default(cuid())
    email      String   @unique
    first_name String
    last_name  String
    password   String
    tokens     token[]
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model user {
    id            String    @id @default(cuid())
    email         String    @unique
    emailVerified DateTime?
    first_name    String
    middle_name   String?
    last_name     String
    image         String?
    password      String?
    tokens        token[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    vote      vote[]

    commissioners election[] @relation("commissioners")
    voters        election[] @relation("voters")
}

enum electionPublicity {
    PUBLIC
    VOTER
    PRIVATE
}

model election {
    id            String            @id @default(cuid())
    slug          String            @unique
    name          String
    description   String?
    start_date    DateTime
    end_date      DateTime
    publicity     electionPublicity @default(PRIVATE)
    voting_start  Int               @default(7) // 7am
    voting_end    Int               @default(19) // 7pm
    logo          String?
    commissioners user[]            @relation("commissioners")
    voters        user[]            @relation("voters")
    candidates    candidate[]
    positions     position[]

    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    vote      vote[]
    partylist partylist[]
}

model candidate {
    id          String  @id @default(cuid())
    slug        String  @unique
    first_name  String
    middle_name String?
    last_name   String
    description String?
    image       String?

    vote_count Int @default(0)

    election   election @relation(fields: [electionId], references: [id], onDelete: Cascade)
    electionId String
    position   position @relation(fields: [positionId], references: [id], onDelete: Cascade)
    positionId String

    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    vote        vote[]
    partylist   partylist? @relation(fields: [partylistId], references: [id], onDelete: Cascade)
    partylistId String?

    @@index([electionId, positionId])
}

model vote {
    id          String    @id @default(cuid())
    election    election  @relation(fields: [electionId], references: [id], onDelete: Cascade)
    electionId  String
    voter       user      @relation(fields: [voterId], references: [id], onDelete: Cascade)
    voterId     String
    candidate   candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    candidateId String

    createdAt DateTime @default(now())

    position    position?  @relation(fields: [positionId], references: [id], onDelete: Cascade)
    positionId  String?
    partylist   partylist? @relation(fields: [partylistId], references: [id], onDelete: Cascade)
    partylistId String?

    @@index([electionId, voterId])
}

model position {
    id            String      @id @default(cuid())
    name          String
    description   String?
    election      election    @relation(fields: [electionId], references: [id], onDelete: Cascade)
    electionId    String
    candidate     candidate[]
    vote          vote[]
    order         Int
    abstain_count Int         @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model partylist {
    id          String      @id @default(cuid())
    name        String
    acronym     String
    description String?
    logo        String?
    election    election    @relation(fields: [electionId], references: [id], onDelete: Cascade)
    electionId  String
    candidate   candidate[]
    vote        vote[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum tokenType {
    EMAIL_VERIFICATION
    RESET_PASSWORD
}

model token {
    id              String         @id @default(cuid())
    type            tokenType
    expiresAt       DateTime
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    user            user?          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String?
    temporaryUser   temporaryUser? @relation(fields: [temporaryUserId], references: [id], onDelete: Cascade)
    temporaryUserId String?
}
